#### Trees
# Perfect Binary Trees
-> bottom/leaf level full
# Full Binary Trees
-> Each node has 0 or 2 childs
# No nodes in each level
-> 2^level
# No of nodes in a tree -> 2^(height-1)
# log nodes = height
# To balance binary search tree -> AVL tree, Red Black tree
# Heap -> Bottom level nodes has lower value than it's upper level nodes

######## Graphs
# Directed vs Undirected
# Weighted vs Unweighted
# Cyclic vs Uncyclic

# To represent graph
 # Edge list = [[n1, n2], [n1, n3], [n2, n4], [n3, n5]] -> connections of nodes, index represents edge
 # Adjacent list = [[n2, n3], [n2, n0], [n1, n3, n4]] -> index also represents node
 # Adjacent matrix = {0:[0, 1, 1], 1:[1, 0, 0], 2:[1, 0, 0]}

# Traversal
 ** Only works with unweighted graphs **
 # BFS
 # DFS
  # Inorder -> Left, Node, Right
  # Preorder -> Node, Left, Right
  # Postorder -> Leftt, Right, Node

# Shortest path
 ** Works with weighted graphs **
 # Dijkstra -> Efficient, but does not work with negative weight
 # Bellman-ford -> Inefficient, but works with negative weight
